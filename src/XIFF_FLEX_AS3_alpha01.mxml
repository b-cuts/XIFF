<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" initialize="init()">
	<mx:Script>
		<![CDATA[
			import org.jivesoftware.xiff.im.Roster;
			import org.jivesoftware.xiff.core.XMPPConnection;
			import org.jivesoftware.xiff.events.*;
			import org.jivesoftware.xiff.data.Message;
			
			internal var _conn:XMPPConnection;
			internal var _roster:Roster;
			
			Security.loadPolicyFile("http://vaio.lymabean.com/crossdomain.xml");
			
			internal function init() : void
			{
				setupXMPPConnection();
				setupConnectionListeners();
				setupRosterListeners();
				setupPresenceListeners();
				setupMessageListeners();
				connect();
			}
			internal function setupXMPPConnection() : void
			{
				// Change these \\
				_conn = new XMPPConnection();
				_conn.username = "test";
				_conn.password = "test";
				_conn.server = "vaio.lymabean.com";
			}			
			internal function connect():void {
	            _conn.connect("flash");
	        }
			internal function testRoster() : void
			{
				_roster = new Roster();
				
			}
			internal function setupConnectionListeners() : void
			{
				_conn.addEventListener(ConnectionSuccessEvent.CONNECT_SUCCESS,onConnectSuccess);
				_conn.addEventListener(XIFFErrorEvent.XIFF_ERROR,onConnectError);
				_conn.addEventListener(OutgoingDataEvent.OUTGOING_DATA,onOutgoingData)
				_conn.addEventListener(IncomingDataEvent.INCOMING_DATA,onIncomingData);
				_conn.addEventListener(DisconnectionEvent.DISCONNECT,onDisconnect);
				_conn.addEventListener(LoginEvent.LOGIN,onLogin);
			}
			internal function setupRosterListeners() : void
			{
				_roster = new Roster();
				_roster.connection = _conn;
				_roster.addEventListener(RosterEvent.SUBSCRIPTION_DENIAL, rosterHandler);
				_roster.addEventListener(RosterEvent.SUBSCRIPTION_REQUEST, rosterHandler);
				_roster.addEventListener(RosterEvent.SUBSCRIPTION_REVOCATION, rosterHandler);
				_roster.addEventListener(RosterEvent.USER_AVAILABLE, rosterHandler);
				_roster.addEventListener(RosterEvent.USER_UNAVAILABLE, rosterHandler);
			}
			internal function setupPresenceListeners() : void
			{
				_conn.addEventListener(PresenceEvent.PRESENCE,presenceHandler);
			}
			internal function setupMessageListeners() : void
			{
				_conn.addEventListener(MessageEvent.MESSAGE,messageHandler);
			}
			
			// Event handlers
			internal function messageHandler(e:MessageEvent):void
			{
				trace("messageHandler: " + e.type);
				var m:Message = e.data as Message;
				trace(m.body);
			}
			internal function presenceHandler(e:PresenceEvent):void
			{
				trace("presenceHandler: " + e.type); 
			}
			internal function rosterHandler(e:RosterEvent):void
			{
				trace("rosterHandler: " + e.type); 
			}
			internal function onLogin(e:LoginEvent):void
			{
				trace("onLogin"); 
			}
			internal function onConnectSuccess(e:ConnectionSuccessEvent):void
			{
				trace("onConnectSuccess"); 
			}
			internal function onDisconnect(d:DisconnectionEvent):void
			{
				trace("onDisconnect"); 
			}
			internal function onConnectError(e:XIFFErrorEvent):void
			{
				trace("onConnectError: " + "type:" + e.errorType + "  message:" + e.errorMessage); 
			}
			internal function onOutgoingData(e:OutgoingDataEvent):void
			{
				trace("onOutgoingData: " + e.data); 
			}
			internal function onIncomingData(e:IncomingDataEvent):void
			{
				trace("onIncomingData: " + e.data); 
			}
		]]>
	</mx:Script>
</mx:Application>
